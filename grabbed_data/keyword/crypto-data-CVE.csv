,topic,subreddit,title,score,id,url,created,body
0,CVE,crypto,ECC and pairing from scratch implementation: how and what to test?,1,h9q4bi,https://www.reddit.com/r/crypto/comments/h9q4bi/ecc_and_pairing_from_scratch_implementation_how/,2020-06-16 08:13:31,"2.5 years ago I started a project to write an elliptic curve and pairing library from scratch with the following curves in mind: - BLS12-381 - BN254 (Snarks) - Secp256k1 This has been put on hold for 2 years but I rebooted it at the beginning of the year. I am now in a quite interesting phase with most of the foundations being implemented: - Big integer - Field arithmetic - Extension fields: Fp2, Fp6 Fp12 - Elliptic curves over Fp and over Fp2 And I'm looking to ensure correctness of those base layers. Note that I have much more to implement: - Hashing to curves - Pairings - Signatures protocols (BLS for sure, ECDSA potentially) The library is named [Constantine](URL and focuses on: - constant-time and side-channel resistance - Constant-time exponentiation, inversion on Fp - Complete Weierstrass formulas for - Constant-time scalar multiplication on G1 and G2 - No dynamic memory allocation thanks to integer generics - speed - ease-of-extension - inspired by Brian Smith post (URL new curves can be declared in a YAML-like file and most necessary constants will be derived, precomputed and inlined at compile-time from the declaration, for example [BN254_Snarks](URL or URL or [BLS12-381](URL - no weird declaration format, everything is declared from hex values that are converted at compile-time to the internal format Back to testing. When I look into pairing libraries written by cryptographers: - Milagro/Miracl: - URL - URL - Relic: - URL - PBC: - URL - Zcash: - URL - URL - Cloudflare - URL I see very few tests. I'm in particular interested into approach to ensure correctness of higher extension fields like Fp12 and on the twisted curve on E(Fp2). This is the state of my current test suite: - URL In particular the template that generates the tests on extension fields and elliptic curves: - URL - URL For those curious about the language I use, it's called [Nim](URL it has similar speed as C and C++ but the syntax of Python (and strongly-typed). It has the following killer features for cryptography: - Distinct types, this allows creating types that are the same implementation-wise (Meters/Miles) but would be a compile-time error on incorrect mix-match. I use them to create distinct types ""SecretBool"" and ""SecretWord"" to enforce using the proper constant-time primitives instead of the default operators - Integer generics and Enum generics: integer generics are very useful to allocate BigInt in static memory. Enum generics are used for curves and dispatch to the specific curve property at compile-time - Advanced compile-time evaluation: You can do multi-precision arithmetic at compile-time, the VM in the compiler runs approximately at the speed of Python interpreter which is great to preconvert constants from hex or precompute in the Montgomery domain or precompute public exponents like `p-2` or `(p-3)/4` - Fast compilation: despite templates/generics the compilation speed is more like C instead of C++ To give you example of things I don't know how to ensure I'm covered: - Unlikely bugs like carry propagation bugs: URL - What are the edge cases in extension fields and elliptic curve (including twists) that should be tested"
1,CVE,crypto,Addressing GOLDEN DOODLE &amp; ZOMBIE POODLE without disabling CBC,2,c35il9,https://www.reddit.com/r/crypto/comments/c35il9/addressing_golden_doodle_zombie_poodle_without/,2019-06-21 13:27:41,"This is concerning CVE-2019-6593. Clearly disabling CBC ciphers is the recommendation I am reading when looking around for mitigations for the new variants. For some sites I am getting an F and the only way I have been able to get the A is to disable the CBC ciphers. I got that, but the obvious problem is IE11 and Windows 7 support for client base. However, when I test a few sites in the cloud, including our own and some very popular ones, they are still getting an A despite still having the CBC in their cipher suites. How can we have it both ways too? Is there something about IaaS and PaaS services or containerization that mitigates this? Trying to understand what a chosen-cipher attack is and how a cloud service or deployment model would matter to obtaining the private key may be irrelevant. I just want to know how they are getting the **A** while still supporting these CBC ciphers in their suites: e.g. Amazon.com [URL e.g. Chase.com [URL I am not finding anything online offering any explanation as to why they get the A while still supporting those ciphers. This could also be that I do not understand something fundamental here. Any insight is appreciated."
2,CVE,crypto,Government Mandated Weaknesses In Crypto Leaves Society Vulnerable To Attack,13,2y8h8r,http://www.reddit.com/r/crypto/comments/2y8h8r/government_mandated_weaknesses_in_crypto_leaves/,2015-03-07 23:28:53,"Government Mandated Weaknesses In Crypto Leaves Society Vulnerable To Attack CVE-2015-0204 a.k.a. FREAK SSL vulnerability Just one example among many, of how society is left vulnerable to attack and cybercrime often resulting from 1 of 3 things: 1- Government mandated weaknesses in crypto 2- Flaws in crypto covertly placed by government agencies. Research BULLRUN 3- Government prohibitions of crypto. Though I dont place all the blame on governments, I place half the blame on the companies, entities whom dumbly comply with government mandated export laws, prohibitions or other demands. For to comply with such is weakening the very security of our society and the infrastructure it relies on. "
