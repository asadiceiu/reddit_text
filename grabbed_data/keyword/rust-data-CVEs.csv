,topic,subreddit,title,score,id,url,created,body
0,CVEs,rust,Which software catastrophes could have been prevented with Rust?,1,evvnqg,https://www.reddit.com/r/rust/comments/evvnqg/which_software_catastrophes_could_have_been/,2020-01-30 10:43:38,"I'm very much interested in hearing about real world scenarios. I came across Microsoft's mentioning of 70% of CVEs being related to memory safety [1], which seems like quite a big deal. For example, from what I understand Ariane 5's [failed maiden flight](URL could not have been solved by Rust either, as they decided to cast an f64 to an i16? The failure of the [Mars Climate Orbiter](URL seems to be another case of sole human error, as from what I understand, it would be impossible to catch by any language. I understand that the language is not a panacea, but what _are_ some scenarios where Rust  or a language with a similar model  could have prevented catastrophes of similar size? 1. URL"
1,CVEs,rust,Linux init system writtable in Rust? (theoretical question),1,ehqtev,https://www.reddit.com/r/rust/comments/ehqtev/linux_init_system_writtable_in_rust_theoretical/,2019-12-31 06:34:48,"Hey all, this is an honest question and not some trolling attempt. As I understand it sysvinit was mostly written using shell scripts, while the systemd PID 1 process is written in C. One of the vaid criticism about systemd is that its most important part (as in: ""the part you really can't do without if you're using systemd"") is a PID 1 written in C and that that's not so great (I think there are already quite a few CVEs leading to full machine ownage due, sometimes, to things as simple as ""parsing a file ending with a semi-colon""). Now I'm not saying shell scripts and sysvinit are stellar nor am I saying that systemd sucks: this is not the sub for that. What I'm wondering is this: it's PID 1, it's userland (as far as I can tell). Could a Linux init system technically be written in Rust? Or are there technical issues that would prevent that? Wouldn't the oxydation of an (PID 1) init system written in C be great? I mean... It's PID 1 ffs."
2,CVEs,rust,Sudo vulnerability (CVE-2019-14287),73,diac0v,https://www.reddit.com/r/rust/comments/diac0v/sudo_vulnerability_cve201914287/,2019-10-16 03:28:19,"Looking at this fix: URL There seems to be several issues here. The sudo source code goes out of its way to parse a negative value before it is cast into a an unsigned. But additionally the Linux kernel syscall code have these lines to effectuate the setgid(): if (rgid != (gid_t) -1) { ... do stuff ... } Mind you that gid_t is defined to be an unsigned 32 bit integer but 0xffffffff has the magic property that setgid does nothing and whatever you want to run then executes with root privileges that are inherited from sudos suid root. Having gotten used to Rusts stricter type checking, reading the sudo &amp; kernel source code just hurts my head a little bit. Signed values are cast back and forth to unsigned, and it is not very surprising that the footgun goes off when the magic ""(unsigned)-1"" value is passed to the kernel. The Microsoft Research blog recently pointed out that a large percentage of CVEs have memory safety issues as root cause. Now I am starting to wonder how many percent of CVEs have sloppy type conversion, and magic values (which can be avoided by using enum variants) as the root cause ?"
