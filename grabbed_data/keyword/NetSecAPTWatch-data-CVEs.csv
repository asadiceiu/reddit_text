,topic,subreddit,title,score,id,url,created,body
0,CVEs,NetSecAPTWatch,[Repo] NSA Releases Updated Guidance on Side-Channel Vulnerabilities,1,amjemd,https://www.reddit.com/r/NetSecAPTWatch/comments/amjemd/repo_nsa_releases_updated_guidance_on_sidechannel/,2019-02-03 09:49:14,"**[Repo] nsacyber / [Hardware-and-Firmware-Security-Guidance](URL [PDF] NSA - [UEFI DEFENSIVE PRACTICES GUIDANCE](URL [Repo] [Intel's CHIPSEC](URL --- US-Cert released an email that has information from the NSA about how to deal with hardware vulnerabilities / sidechannel attacks, as well as how to protect against exploits like LoJax, which you can read about in ESET's report [here](URL If you haven't already read it, its a real interesting read that exemplifies how adversaries can take advantage of legitimate tools with malicious intent. The repo from the NSA has A LOT of useful information, like how to prevent hardware vulnerabilities from happening in the first place, what processors you should get/avoid, and how to configure your UEFI to minimize attack surface area. The repo at the top of this page holds the majority of content and links to the majority of content I have linked to. Really interesting to read as well. This comes after the US has taken a more defensive stance to protecting critical infrastructure against cyberattacks. This was also released only around a week or two after the first emergency cyberalert was issued by the DoD, exemplifying the move the US has been taken towards not just protecting government agencies, but also important parts to the US itself. Interestingly, there are actually a lot more variants of these hardware vulnerabilities than I imagined. Some don't even have CVEs assigned to them. This resource does a good job at describing them. Its worrying to know that these hardware vulnerabilities exist in the majority of systems and its not something you can always fix with a software patch. Also for UEFI Rootkits like LoJax, [ESET is the only company that provides a UEFI Scanner](URL as far as I know. There is also [Intel's CHIPSEC](URL which is a really powerful tool that can be used to look at the UEFI at a low-level and analyze the security of different components. --- Also, just another resource I wanted to add that is from last year, MIT released a paper to combat speculative execution vulnerabilities with a hardware-based solution. You can read the paper below: * [PDF] [DAWG: A Defense Against Cache Timing Attacks in Speculative Execution Processors](URL"
1,CVEs,NetSecAPTWatch,Adobe ColdFusion (CVE-2018-15961) Has Been Actively Exploited By Chinese APTs,1,9xk2yl,https://www.reddit.com/r/NetSecAPTWatch/comments/9xk2yl/adobe_coldfusion_cve201815961_has_been_actively/,2018-11-16 18:36:36,"# Adobe ColdFusion (CVE-2018-15961) Has Been Actively Exploited By Chinese APTs --- **16 Nov 2018** | /r/NetSecAPTWatch *Note: This is a pre-release test of silene, a modular standard I am developing that's built on Markdown. Its currently 2am here so I apologize that this isn't proof-read well.* **Adobe Coldfusion**, an adobe application for rapid development of websites, has recently been patched by Adobe after a **critical vulnerability**, [CVE-2018-15961](URL allowed attackers to have unrestricted file upload access that could lead to arbitrary code-execution. After investigation by **Volexity**, Adobe and Volexity were able to learn that the vulnerability has been consistently abused by Chinese APT Threat Actors with no public PoC available. If your server or your organization's server uses Adobe Coldfusion for your website, you should be sure that you are safe. You may use the detection section. [**The Official Report**](URL by **Volexity** provides a more technical look into the vulnerability and its exploitation by malicious Chinese APT threat actors. ## Exploit *Refer to Report for more information* **Affected-Products**|Adobe Coldfusion **CVEs**|CVE-2018-15961 **Traits|**Does Not Require User Authentication|Remote-Code Execution **Other-Tags**|upload.cfm|HTTP POST ### Exploitation Steps To exploit, you just send a **HTTP POST** request to the server for file **upload.cfm**. ### Exploitation Example *This has redacted info.* ```http POST /cf_scripts/scripts/ajax/ckeditor/plugins/filemanager/upload.cfm?action=upload HTTP/1.1 Accept: text/html, application/xhtml+xml, */* Accept-Language: en-US User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36 Content-Type: multipart/form-data; boundary=5b12d3a3190134 Accept-Encoding: gzip, deflate Content-Length: 9308 Host: &lt;hostname&gt; Pragma: no-cache Connection: close 5b12d3a3190134 &lt;redacted&gt; ``` ## Timeline **11 Sept. 2018**|Adobe Releases Critical Patch (APSB18-33) For Adobe Coldfusion **28 Sept. 2018**|Adobe Releases A Public Update Regarding APT Abuse of CVE-2018-15961 in the Wild **8 Nov. 2018**|Voltrex releases their report. **9 Nov. 2018**|Articles first start to break in response to the APT Abuse. ## Prevention You may prevent infection by updating your adobe coldfusion. ## Detection **Methods|**Signatures|Log Analysis| You may detect an intrusion with these NIDS signatures. ### Signatures **Provided-By|**Volexity **For|**NIDS|IDS **Types|**Snort|Suricata #### Suricata ```Suri alert http $EXTERNAL_NET any -&gt; $HOME_NET any (msg:Volex  ColdFusion Unauthenticated Upload Attempt (upload.cfm); flow:to_server,established; content:POST; http_method; content:upload.cfm?action=upload; nocase; http_uri; sid:2018093003;) ``` #### Snort ```Sn alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:Volex  ColdFusion Unauthenticated Upload Attempt (upload.cfm); flow:to_server,established; content:POST; http_method; content:upload.cfm?action=upload; nocase; http_uri; sid:2018093003;) ``` ## Mitigation **Method|**Update Refer to **Volexity's Official Report**. You can also contact them for Enterprise Breach Assistance or even for more information [here](URL {**Volexity**|Quote} &gt; Volexity recommends organizations identify any instances of Adobe ColdFusion currently in use, and verify the current version running. It is highly recommended that any vulnerable instances be patched to the latest version immediately. ## CVE-2018-15961 [**NVD**](URL | [Security Bulletin](URL **Affected-Products:** Adobe Coldfusion **Found-By:** [Foundeo](URL | [Volexity](URL **Month:** September **Used-Maliciously:** Yes (**ref**:APT:china.temp0000) ## Groups ### APTs #### china.temp0000 This APT uploaded a JSP version of China Chopper by exploiting remote adobe servers that ran on Adobe Coldfusion. They used CVE-2018-15961 to exploit it. They were discovered by Volexity as having abused CVE-2018-15961 before it was patched. **CVE|**CVE-2018-15961 **Country|** China **References**|[Volexity Report](URL **Malware|**China Chopper ## Resources ### Reports **{8 Nov. 2018** | Volexity | [Active Exploitation of Newly Patched ColdFusion Vulnerability (CVE-2018-15961)](URL ### Articles **{8 Nov. 2018**| ZDNet | [Adobe ColdFusion servers under attack from APT group](URL **{9 Nov. 2018** | Threatpost | [Recently-Patched Adobe ColdFusion Flaw Exploited By APT](URL ### Media **{Volexity**|Image|[Timeline Of Coldfusion Exploit By APT](URL ### Others #### Security Bulletins **{11 Sept. 2018**|Adobe|[APSB18-33](URL ------ # :|silene {**@pre-release**|Not Implemented Currently} {**@communities**|/r/NetSecAPTWatch||/r/netsec} {**@dynamic-tags-standards**|CVEs|Software|MITREATTACK|APTs} &gt; an improved standard for defining modular data structures, formats, or even standards that are beautiful, simplistic, simple to scrape **without having to follow all those rules**. &gt; I am actively documenting every single design choice and why I did it the way I did. ## Contributors This is maintained by /r/NetSecAPTWatch &gt; /u/hemlck"
2,CVEs,NetSecAPTWatch,[Alert] Several Vulnerabilities Found In IOS 12.1 and Other Apple Products,1,a3gtnd,https://www.reddit.com/r/NetSecAPTWatch/comments/a3gtnd/alert_several_vulnerabilities_found_in_ios_121/,2018-12-06 08:30:20,"# Several Vulnerabilities Found In IOS 12.1 **5 Dec. 2018** | /u/Hemlck --- For All Apple Security Updates, Please Refer To [This](URL --- I am probably one of the first people posting about this as I just received the email five minutes ago. This list is not complete. This list of CVEs is only for IOS. Visit the link above to find out all the other security vulnerabilities. Please note, IOS is not the only Operating System/Device Affected. Almost all Apple Devices are Affected. --- **Security Advisory**|[HT209340](URL **CVEs**|: * CVE-2018-4430 * CVE-2018-4465 * CVE-2018-4430 * CVE-2018-4446 * CVE-2018-4460 * CVE-2018-4431 * CVE-2018-4435 * CVE-2018-4447 * CVE-2018-4461 * CVE-2018-4429 * CVE-2018-4436 * CVE-2018-4439 * CVE-2018-4440 * CVE-2018-4445 * CVE-2018-4441 * CVE-2018-4442 * CVE-2018-4443 * CVE-2018-4438 * CVE-2018-4437 * CVE-2018-4464 ## IOS Mitigation Please Update Your IOS Device to **IOS 12.1.1**"
3,CVEs,NetSecAPTWatch,[Alert] Critical Zero-Day Adobe Flash Exploit Is Actively Being Abused In The Wild,1,a3h4q3,https://www.reddit.com/r/NetSecAPTWatch/comments/a3h4q3/alert_critical_zeroday_adobe_flash_exploit_is/,2018-12-06 09:01:46,"# Critical Zero-Day Adobe Flash Exploit Is Actively Being Abused In The Wild **5 Dec. 2018** | /r/NetSecAPTWatch --- **Advisory**|[APSB18-42](URL **CVEs**|[**CVE-2018-15982**](URL and CVE-2018-15983 **Affected Products**|Adobe Flash --- **Patch Available**|True **Patch Release Date**|5 Dec. 2018 --- ## Brief A **Critical Zero Day** in **Adobe Flash** allows execution of arbitrary code and is actively been abused by malicious actors in a widespread spearphishing campaign. The campaign uses Microsoft Office Documents (.docx) to spread and abuses **Flash ActiveX**. ## CVE-2018-15982 **CWE**|[CWE-416](URL The exploit works by leveraging embedded **Flash ActiveX**. After the user opens the document, ActiveX Plug-In is able to call Adobe Flash and execute arbitrary code. It then references memory that has already been freed to execu, also known as Use After Free Bug (CWE-416) ## CVE-2018-15983 *As far as I am aware, this is not actively being abused*. **Type**|Privilege Escalation This is a DLL hijacking vulnerability. Not too much has been posted about it. ## Mitigation **Patch**|32.0.0.101"
